LangGraph Workflow in local-deep-researcher
The LangGraph workflow in the langchain-ai/local-deep-researcher repository implements an iterative web research system using a StateGraph orchestration pattern. The workflow performs deep research by executing multiple search-summarize-reflect cycles until a comprehensive research report is generated.

Workflow Architecture
The workflow is built using LangGraph's StateGraph class that manages state through a SummaryState dataclass graph.py:283 . The state contains key fields including research_topic, search_query, running_summary, sources_gathered, research_loop_count, and web_research_results state.py:6-12 .

Detailed Node Sequence
The workflow consists of five main processing nodes that execute in a specific sequence:

1. generate_query Node
The workflow starts with the generate_query node that creates an optimized search query from the user's research topic graph.py:17-29 . This node uses either ChatOllama or ChatLMStudio (based on configuration) in JSON mode to generate structured search queries graph.py:42-55 .

2. web_research Node
The web_research node executes web searches using the generated query through configurable search APIs (Tavily, Perplexity, DuckDuckGo, or SearXNG) graph.py:76-88 . It supports different search implementations based on the configured search API graph.py:97-110 and updates the state with search results, sources, and increments the research loop counter graph.py:112 .

3. summarize_sources Node
The summarize_sources node processes the web research results to create or update a running summary graph.py:114-127 . It handles both initial summary creation and incremental updates to existing summaries graph.py:136-146 .

4. reflect_on_summary Node
The reflect_on_summary node analyzes the current summary to identify knowledge gaps and generates follow-up search queries graph.py:177-189 . It uses JSON-structured output to extract follow-up queries and includes fallback logic for parsing failures graph.py:217-229 .

5. finalize_summary Node
The finalize_summary node prepares the final research report by deduplicating sources and formatting them with the running summary graph.py:231-243 . It creates a well-structured output with both summary content and source citations graph.py:259-260 .

Transition Conditions and Routing Logic
The workflow uses both direct edges and conditional routing to control the flow:

Direct Edge Transitions
The workflow follows a linear sequence for most transitions graph.py:291-294 :

START → generate_query
generate_query → web_research
web_research → summarize_sources
summarize_sources → reflect_on_summary
Conditional Routing Logic
The key decision point is the route_research function that determines whether to continue the research loop or finalize the summary graph.py:262-280 . The routing condition compares the current research_loop_count against the configured max_web_research_loops parameter graph.py:277-280 :

If research_loop_count <= max_web_research_loops: continues to web_research for another iteration
If research_loop_count > max_web_research_loops: proceeds to finalize_summary to end the workflow
The conditional routing is implemented using add_conditional_edges with the routing function graph.py:295 .

Configuration-Driven Behavior
The workflow behavior is controlled by the Configuration class, with the max_web_research_loops parameter being the primary control for iteration depth configuration.py:17-21 . Other configuration parameters control LLM providers, search APIs, and content processing options configuration.py:27-56 .

Notes
The workflow implements a sophisticated iterative research pattern where each cycle builds upon previous knowledge. The conditional routing ensures the research process terminates after a configurable number of iterations while allowing for thorough exploration of the research topic. The state management through SummaryState maintains continuity across iterations, accumulating sources and refining the summary with each cycle.

PROMPTS

query_writer_instructions="""Your goal is to generate a targeted web search query.

<CONTEXT>
Current date: {current_date}
Please ensure your queries account for the most current information available as of this date.
</CONTEXT>

<TOPIC>
{research_topic}
</TOPIC>

<FORMAT>
Format your response as a JSON object with ALL three of these exact keys:
   - "query": The actual search query string
   - "rationale": Brief explanation of why this query is relevant
</FORMAT>

<EXAMPLE>
Example output:
{{
    "query": "machine learning transformer architecture explained",
    "rationale": "Understanding the fundamental structure of transformer models"
}}
</EXAMPLE>

Provide your response in JSON format:"""
 
summarizer_instructions="""
<GOAL>
Generate a high-quality summary of the provided context.
</GOAL>

<REQUIREMENTS>
When creating a NEW summary:
1. Highlight the most relevant information related to the user topic from the search results
2. Ensure a coherent flow of information

When EXTENDING an existing summary:                                                                                                                 
1. Read the existing summary and new search results carefully.                                                    
2. Compare the new information with the existing summary.                                                         
3. For each piece of new information:                                                                             
    a. If it's related to existing points, integrate it into the relevant paragraph.                               
    b. If it's entirely new but relevant, add a new paragraph with a smooth transition.                            
    c. If it's not relevant to the user topic, skip it.                                                            
4. Ensure all additions are relevant to the user's topic.                                                         
5. Verify that your final output differs from the input summary.                                                                                                                                                            
< /REQUIREMENTS >

< FORMATTING >
- Start directly with the updated summary, without preamble or titles. Do not use XML tags in the output.  
< /FORMATTING >

<Task>
Think carefully about the provided Context first. Then generate a summary of the context to address the User Input.
</Task>
"""
 
reflection_instructions = """You are an expert research assistant analyzing a summary about {research_topic}.

<GOAL>
1. Identify knowledge gaps or areas that need deeper exploration
2. Generate a follow-up question that would help expand your understanding
3. Focus on technical details, implementation specifics, or emerging trends that weren't fully covered
</GOAL>

<REQUIREMENTS>
Ensure the follow-up question is self-contained and includes necessary context for web search.
</REQUIREMENTS>

<FORMAT>
Format your response as a JSON object with these exact keys:
- knowledge_gap: Describe what information is missing or needs clarification
- follow_up_query: Write a specific question to address this gap
</FORMAT>

<Task>
Reflect carefully on the Summary to identify knowledge gaps and produce a follow-up query. Then, produce your output following this JSON format:
{{
    "knowledge_gap": "The summary lacks information about performance metrics and benchmarks",
    "follow_up_query": "What are typical performance benchmarks and metrics used to evaluate [specific technology]?"
}}
</Task>

Provide your analysis in JSON format:"""